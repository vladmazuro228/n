from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import sqlite3
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MAIN_BOT_TOKEN = '8134477300:AAEu8-wqll5T6Q6D2THgXWsGhn5lQHm1UZQ'
ADMIN_BOT_TOKEN = '8010374415:AAFHqi-NIwxqNx9bIWEh4UKs3P66rUacrR8'
ADMIN_CHAT_ID = '7687325093'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class PurchaseStates(StatesGroup):
    waiting_for_token = State()
    waiting_for_id = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
main_bot = Bot(token=MAIN_BOT_TOKEN)
admin_bot = Bot(token=ADMIN_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(main_bot, storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('bans.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''CREATE TABLE IF NOT EXISTS bans
                (user_id INTEGER PRIMARY KEY, 
                 username TEXT,
                 reason TEXT,
                 admin_id INTEGER,
                 ban_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS referrals
                (user_id INTEGER PRIMARY KEY, referrer_id INTEGER)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS balances
                (user_id INTEGER PRIMARY KEY, balance INTEGER DEFAULT 0)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS purchases
                (user_id INTEGER, package TEXT, bot_token TEXT, bot_id TEXT, date TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
conn.commit()

# –¶–µ–Ω—ã –ø–∞–∫–µ—Ç–æ–≤
PRICES = {
    "option1": ("100 —Ä—É–±–ª–µ–π", "‚ù§Ô∏è –ü—Ä–æ—Å—Ç–∞—è —Ä–∞—Ç–∫–∞"),
    "option2": ("500 —Ä—É–±–ª–µ–π", "üíé –ü—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç"),
    "option3": ("1000 —Ä—É–±–ª–µ–π", "üöÄ VIP –ø–∞–∫–µ—Ç")
}

# ===================== –°–ò–°–¢–ï–ú–ê –ë–ê–ù–û–í =====================
async def is_banned(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    cursor.execute("SELECT reason FROM bans WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else None

async def ban_user(user_id, username=None, reason="–ù–µ —É–∫–∞–∑–∞–Ω–∞", admin_id=ADMIN_CHAT_ID):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–Ω-–ª–∏—Å—Ç"""
    try:
        username = username.lstrip('@').lower() if username else None
        cursor.execute(
            "INSERT OR REPLACE INTO bans (user_id, username, reason, admin_id) VALUES (?, ?, ?, ?)",
            (user_id, username, reason, admin_id)
        )
        conn.commit()
        return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

async def unban_user(user_id):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–Ω-–ª–∏—Å—Ç–∞"""
    try:
        cursor.execute("DELETE FROM bans WHERE user_id=?", (user_id,))
        conn.commit()
        return cursor.rowcount > 0
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

async def get_ban_list():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    cursor.execute("SELECT user_id, username, reason, admin_id, ban_date FROM bans")
    return cursor.fetchall()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
def is_admin(user_id):
    return str(user_id) == ADMIN_CHAT_ID

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏)
def get_balance(user_id):
    cursor.execute("INSERT OR IGNORE INTO balances (user_id, balance) VALUES (?, 0)", (user_id,))
    conn.commit()
    cursor.execute("SELECT balance FROM balances WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

# ===================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î =====================
@dp.message_handler(commands=['start'], state="*")
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    
    ban_reason = await is_banned(message.from_user.id)
    if ban_reason:
        await message.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!\n–ü—Ä–∏—á–∏–Ω–∞: {ban_reason}")
        return

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    args = message.get_args()
    if args.startswith('ref_'):
        try:
            referrer_id = int(args.split('_')[1])
            current_user_id = message.from_user.id
            
            if referrer_id != current_user_id:
                cursor.execute("SELECT 1 FROM referrals WHERE user_id=?", (current_user_id,))
                if not cursor.fetchone():
                    cursor.execute("INSERT OR IGNORE INTO balances (user_id, balance) VALUES (?, 0)", (referrer_id,))
                    cursor.execute("INSERT INTO referrals VALUES (?, ?)", (current_user_id, referrer_id))
                    cursor.execute("UPDATE balances SET balance = balance + 10 WHERE user_id = ?", (referrer_id,))
                    conn.commit()
                    
                    try:
                        await main_bot.send_message(
                            referrer_id,
                            f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! +10‚ÇΩ\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_balance(referrer_id)}‚ÇΩ"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        except (IndexError, ValueError, sqlite3.Error) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚ù§Ô∏è 100—Ä - –ü—Ä–æ—Å—Ç–∞—è —Ä–∞—Ç–∫–∞", callback_data="option1"),
        InlineKeyboardButton("üíé 500—Ä - –ü—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç", callback_data="option2"),
        InlineKeyboardButton("üöÄ 1000—Ä - VIP –ø–∞–∫–µ—Ç", callback_data="option3")
    )
    
    try:
        await message.answer_photo(
            InputFile("troll.jpg"),
            caption="–ü—Ä–∏–≤–µ—Ç‚úã! –î–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª —Ä–∞—Ç–∫—É, —á—Ç–æ–±—ã –ø–æ—Ç—Ä–æ–ª–ª–∏—Ç—å —à–∫–æ–ª—å–Ω–∏–∫–æ–≤, –Ω–æ –Ω–µ—Ç –ø–∫?üòø\n"
                   "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ jikoRAT –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –ª—É—á—à–µ–≥–æ –±–æ—Ç–∞, –∑–∞ –ª—É—á—à—É—é —Ü–µ–Ω—É!\n"
                   "(–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /info), —Ç–∞–∫–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ /ref, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞–ø–∏—à–∏—Ç–µ /balance",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç‚úã! –î–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª —Ä–∞—Ç–∫—É, —á—Ç–æ–±—ã –ø–æ—Ç—Ä–æ–ª–ª–∏—Ç—å —à–∫–æ–ª—å–Ω–∏–∫–æ–≤, –Ω–æ –Ω–µ—Ç –ø–∫?üòø\n"
            "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ jikoRAT –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –ª—É—á—à–µ–≥–æ –±–æ—Ç–∞, –∑–∞ –ª—É—á—à—É—é —Ü–µ–Ω—É!",
            reply_markup=keyboard
        )

@dp.message_handler(commands=['info'])
async def show_info(message: types.Message):
    functions = [
        "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç - –¥–µ–ª–∞–µ—Ç —Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞",
        "üíª –î–∞–Ω–Ω—ã–µ –ü–ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ",
        "üì∑ –§–æ—Ç–æ —Å –≤–µ–±–∫–∞–º–µ—Ä—ã - –¥–µ–ª–∞–µ—Ç —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã",
        "üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
        "üìÅ –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é",
        "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É - —É–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É",
        "üìù –û–∫–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª - —É–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª",
        "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª - –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å URL",
        "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª - –≤—ã–ø–æ–ª–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª",
        "üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ –Ω–∞ 100% - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å",
        "üîá –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ - –æ—Ç–∫–ª—é—á–∞–µ—Ç –∑–≤—É–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é",
        "‚èª –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö - –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞",
        "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É",
        "‚å®Ô∏è ALT + F4 - –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ",
        "‚¨áÔ∏è –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –æ–∫–Ω–∞ - –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –æ–∫–Ω–∞",
        "üåÄ –°–≤–µ—Å—Ç–∏ —Å —É–º–∞ –∫—É—Ä—Å–æ—Ä - —Ö–∞–æ—Ç–∏—á–Ω–æ –¥–≤–∏–≥–∞–µ—Ç –∫—É—Ä—Å–æ—Ä",
        "üñºÔ∏è –ü–æ–º–µ–Ω—è—Ç—å –æ–±–æ–∏ - –∏–∑–º–µ–Ω—è–µ—Ç —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª - –∏–∑–º–µ–Ω—è–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞",
        "üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª - —à–∏—Ñ—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª",
        "üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Ñ–∞–π–ª",
        "üéÆ –õ–æ–≥–∏ Steam - —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Steam",
        "üåê –õ–æ–≥–∏ Chrome - —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–∞",
        "üåê –õ–æ–≥–∏ Opera - —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Opera",
        "üì± –õ–æ–≥–∏ Telegram - —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Telegram",
        "üëª –°–∫—Ä–∏–º–µ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É–≥–∞—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        "üìÇ –°–∫–∞—á–∞—Ç—å –ø–∞–ø–∫—É - –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å—é –ø–∞–ø–∫—É",
        "üìä –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã",
        "‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É - –∑–∞–≤–µ—Ä—à–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å",
        "üí• –°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ - —É–¥–∞–ª—è–µ—Ç —Å–ª–µ–¥—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç—å –º–æ–Ω–∏–∫ - –º–µ–Ω—è–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞",
        "‚å®Ô∏è –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç - –∏–º–∏—Ç–∏—Ä—É–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞",
        "üìÑ –§–∞–π–ª - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º"
    ]
    
    response = "üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n\n" + "\n".join(f"‚Ä¢ {func}" for func in functions)
    await message.answer(response)

# ===================== –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ë–ê–ù–û–í =====================
@dp.message_handler(commands=['ban'])
async def ban_command(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 2:
        await message.reply("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id> [–ø—Ä–∏—á–∏–Ω–∞]")
        return

    try:
        user_id = int(args[1])
        reason = args[2] if len(args) > 2 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        if await ban_user(user_id, reason=reason, admin_id=message.from_user.id):
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
            try:
                await main_bot.send_message(user_id, f"‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
            except:
                pass
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except ValueError:
        await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

@dp.message_handler(commands=['unban'])
async def unban_command(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    args = message.text.split()
    if len(args) < 2:
        await message.reply("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")
        return

    try:
        user_id = int(args[1])
        if await unban_user(user_id):
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
            try:
                await main_bot.send_message(user_id, "üéâ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!")
            except:
                pass
        else:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–Ω-–ª–∏—Å—Ç–µ")
    except ValueError:
        await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

@dp.message_handler(commands=['banlist'])
async def ban_list_command(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    bans = await get_ban_list()
    if not bans:
        await message.reply("üì≠ –ë–∞–Ω-–ª–∏—Å—Ç –ø—É—Å—Ç")
        return

    ban_list = "\n".join(
        f"{uid} | @{uname or '–Ω–µ—Ç'} | {reason} | {admin} | {date}"
        for uid, uname, reason, admin, date in bans
    )
    await message.reply(f"üö´ –ë–∞–Ω-–ª–∏—Å—Ç:\n\n{ban_list}")

# ===================== –û–°–¢–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ =====================
@dp.message_handler(commands=['ref'])
async def show_ref_link(message: types.Message):
    try:
        user_id = message.from_user.id
        bot_username = (await main_bot.get_me()).username
        ref_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
        
        await message.reply(
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{ref_link}</code>\n\n"
            f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>10‚ÇΩ</b>!\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{get_balance(user_id)}‚ÇΩ</b>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /ref: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(commands=['balance'])
async def show_balance(message: types.Message):
    try:
        balance = get_balance(message.from_user.id)
        await message.reply(
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance}‚ÇΩ</b>\n\n"
            f"10‚ÇΩ = 1 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –¥—Ä—É–≥",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ===================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö =====================
@dp.callback_query_handler(lambda call: True, state="*")
async def handle_buttons(call: types.CallbackQuery, state: FSMContext):
    try:
        if await is_banned(call.from_user.id):
            await call.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
            return

        if call.data in ["option1", "option2", "option3"]:
            price, name = PRICES[call.data]
            desc = {
                "option1": "‚ù§Ô∏è –ü—Ä–æ—Å—Ç–∞—è —Ä–∞—Ç–∫–∞, –±–µ–∑ –Ω–∏—á–µ–≥–æ",
                "option2": "üíé –í–∫–ª—é—á–∞–µ—Ç:\n- –†–∞—Ç–∫—É\n- –õ–∏—á–Ω—É—é –ü–æ–¥–¥–µ—Ä–∂–∫—É –≤–ª–∞–¥–µ–ª—å—Ü–∞\n- –ü–∞–∫ —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞(–æ—á–µ–Ω—å –ª—é—Ç—ã–π)",
                "option3": "üöÄ –í–∫–ª—é—á–∞–µ—Ç:\n- –†–∞—Ç–∫—É\n- –¢—É—Ç–æ—Ä –∫–∞–∫ –¥–µ–ª–∞—Ç—å —Å–∞–º–∏ —Ä–∞—Ç–∫–∏\n- –õ–∏—á–Ω–∞—è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ—Ä–∞\n- –ü–∞–∫ —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞(–æ—á–µ–Ω—å –ª—é—Ç—ã–π)\n- –ü–æ–¥–¥–µ—Ä–∂–∫—É –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ‚ù§Ô∏è"
            }[call.data]

            await call.message.answer(
                f"{name} –∑–∞ {price}\n{desc}",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("–ö—É–ø–∏—Ç—å ‚úÖ", callback_data=f"buy_{call.data}")
                )
            )

        elif call.data.startswith("buy_"):
            package = call.data.split("_")[1]
            price_rub = int(PRICES[package][0].split()[0])
            user_balance = get_balance(call.from_user.id)

            if user_balance >= price_rub:
                keyboard = InlineKeyboardMarkup()
                keyboard.add(
                    InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å–æ–º üí∞", callback_data=f"pay_balance_{package}")
                )
                await call.message.answer(
                    f"–£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ë–∞–ª–∞–Ω—Å: <b>{user_balance}‚ÇΩ</b>\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞: <b>{price_rub}‚ÇΩ</b>",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            else:
                await call.message.answer(
                    f"üí≥ –û–ø–ª–∞—Ç–∞ {PRICES[package][0]}:\n"
                    "https://www.donationalerts.com/r/jikorat\n\n"
                    "–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ:\n"
                    f"1. –í–∞—à @username\n"
                    f"2. –ü–∞–∫–µ—Ç: {PRICES[package][1]}\n\n"
                    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ:",
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ", callback_data=f"paid_{package}")
                    )
                )

        elif call.data.startswith("paid_") or call.data.startswith("pay_balance_"):
            if call.data.startswith("paid_"):
                package = call.data.split("_")[1]
                payment_method = "DonationAlerts"
            else:
                package = call.data.split("_")[2]
                payment_method = "–ë–∞–ª–∞–Ω—Å"
                price_rub = int(PRICES[package][0].split()[0])
                cursor.execute("UPDATE balances SET balance = balance - ? WHERE user_id = ?",
                              (price_rub, call.from_user.id))
                conn.commit()

            await PurchaseStates.waiting_for_token.set()
            await state.update_data(package=package, payment_method=payment_method)
            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:", reply_markup=ReplyKeyboardRemove())

        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ===================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–°–¢–û–Ø–ù–ò–ô =====================
@dp.message_handler(state=PurchaseStates.waiting_for_token)
async def process_token(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['bot_token'] = message.text
        
        await PurchaseStates.next()
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID –±–æ—Ç–∞:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.finish()

@dp.message_handler(state=PurchaseStates.waiting_for_id)
async def process_id(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            user_id = message.from_user.id
            package = data['package']
            bot_token = data['bot_token']
            bot_id = message.text
            payment_method = data['payment_method']

            cursor.execute("INSERT INTO purchases VALUES (?, ?, ?, ?, datetime('now'))",
                          (user_id, package, bot_token, bot_id))
            conn.commit()

            if admin_bot:
                username = f"@{message.from_user.username}" if message.from_user.username else f"ID:{user_id}"
                text = (
                    f"üõí –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!\n\n"
                    f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {username}\n"
                    f"üÜî ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: `{user_id}`\n"
                    f"üì¶ –ü–∞–∫–µ—Ç: {PRICES[package][1]}\n"
                    f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}\n"
                    f"üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞: `{bot_token}`\n"
                    f"üÜî ID –±–æ—Ç–∞: `{bot_id}`\n\n"
                    f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                )
                await admin_bot.send_message(ADMIN_CHAT_ID, text, parse_mode="Markdown")

        await message.answer(
            "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.finish()

# ===================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ =====================
@dp.message_handler(commands=['add_balance'])
async def add_balance(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    try:
        args = message.text.split()
        if len(args) < 3:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_balance <user_id> <—Å—É–º–º–∞>")
            return

        user_id = int(args[1])
        amount = int(args[2])
        
        cursor.execute("INSERT OR IGNORE INTO balances VALUES (?, ?)",
                      (user_id, 0))
        cursor.execute("UPDATE balances SET balance = balance + ? WHERE user_id = ?",
                      (amount, user_id))
        conn.commit()

        await message.reply(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ")
        await main_bot.send_message(user_id, f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{amount}‚ÇΩ</b>!", parse_mode="HTML")

    except (IndexError, ValueError):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_balance <user_id> <—Å—É–º–º–∞>")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)
